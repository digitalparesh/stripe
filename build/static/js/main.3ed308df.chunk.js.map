{"version":3,"sources":["CardSection.js","CheckoutForm.js","App.js","serviceWorker.js","index.js"],"names":["CARD_ELEMENT_OPTIONS","style","base","color","fontSize","fontFamily","fontSmoothing","invalid","CardSection","options","CheckoutForm","handleSubmit","event","a","preventDefault","props","stripe","elements","card","getElement","CardElement","createToken","result","error","alert","console","log","message","token","className","onSubmit","this","disabled","React","Component","InjectedCheckoutForm","stripePromise","loadStripe","App","src","alt","width","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"0SAGMA,EAAuB,CAC3BC,MAAO,CACLC,KAAM,CACJC,MAAO,UACPC,SAAU,OACVC,WAAY,aACZC,cAAe,cACf,gBAAiB,CACfH,MAAO,YAGXI,QAAS,CACPJ,MAAO,UACP,SAAU,CACRA,MAAO,cAeAK,MATf,WACE,OACE,8CAEE,kBAAC,cAAD,CAAaC,QAAST,MCtBtBU,E,4MACJC,a,uCAAe,WAAMC,GAAN,uBAAAC,EAAA,yDACbD,EAAME,iBADO,EAGgB,EAAKC,MAA1BC,EAHK,EAGLA,OAAQC,EAHH,EAGGA,SACXD,GAAWC,EAJH,wDAQPC,EAAOD,EAASE,WAAWC,eARpB,SASQJ,EAAOK,YAAYH,GAT3B,QASPI,EATO,QAUFC,OACPC,MAAM,mBACRC,QAAQC,IAAIJ,EAAOC,MAAMI,WAEzBF,QAAQC,IAAIJ,EAAOM,OACnBJ,MAAM,oBAfK,2C,6GAoBb,OACE,6BACE,yBAAKK,UAAU,gBACb,wBAAIA,UAAU,iBAAd,qBACA,wBAAIA,UAAU,iBAAd,SAEF,0BAAMC,SAAUC,KAAKpB,cACnB,kBAAC,EAAD,MACA,4BAAQqB,UAAWD,KAAKhB,MAAMC,OAAQa,UAAU,WAAhD,iB,GA7BiBI,IAAMC,WAsClB,SAASC,IACtB,OACE,kBAAC,mBAAD,MACG,gBAAGnB,EAAH,EAAGA,OAAQC,EAAX,EAAWA,SAAX,OACC,kBAAC,EAAD,CAAcD,OAAQA,EAAQC,SAAUA,OCxChD,IAAMmB,EAAgBC,YAAW,+GAqBlBC,EAnBH,WACV,OACE,yBAAKT,UAAU,OACb,yBAAKA,UAAU,WACb,yBACEU,IAAI,wEACJC,IAAI,SACJvC,MAAO,CAAEwC,MAAO,OAAQC,OAAQ,UAElC,6BACA,kBAAC,WAAD,CAAU1B,OAAQoB,GACd,kBAAC,EAAD,WCRQO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLE,QAAQF,MAAMA,EAAMI,c","file":"static/js/main.3ed308df.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { CardElement } from \"@stripe/react-stripe-js\";\r\n\r\nconst CARD_ELEMENT_OPTIONS = {\r\n  style: {\r\n    base: {\r\n      color: \"#303238\",\r\n      fontSize: \"16px\",\r\n      fontFamily: \"sans-serif\",\r\n      fontSmoothing: \"antialiased\",\r\n      \"::placeholder\": {\r\n        color: \"#CFD7DF\"\r\n      }\r\n    },\r\n    invalid: {\r\n      color: \"#e5424d\",\r\n      \":focus\": {\r\n        color: \"#303238\"\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nfunction CardSection() {\r\n  return (\r\n    <label>\r\n      Card details\r\n      <CardElement options={CARD_ELEMENT_OPTIONS} />\r\n    </label>\r\n  );\r\n}\r\n\r\nexport default CardSection;","import React from \"react\";\r\nimport { ElementsConsumer, CardElement } from \"@stripe/react-stripe-js\";\r\n\r\nimport CardSection from \"./CardSection\";\r\n\r\nclass CheckoutForm extends React.Component {\r\n  handleSubmit = async event => {\r\n    event.preventDefault();\r\n\r\n    const { stripe, elements } = this.props;\r\n    if (!stripe || !elements) {\r\n      return;\r\n    }\r\n\r\n    const card = elements.getElement(CardElement);\r\n    const result = await stripe.createToken(card);\r\n    if (result.error) {\r\n        alert(\"field is empty!\")\r\n      console.log(result.error.message);\r\n    } else {\r\n      console.log(result.token);\r\n      alert(\"success payment\")\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"product-info\">\r\n          <h3 className=\"product-title\">Apple MacBook Pro</h3>\r\n          <h4 className=\"product-price\">$999</h4>\r\n        </div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <CardSection />\r\n          <button disabled={!this.props.stripe} className=\"btn-pay\">\r\n            Buy Now\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default function InjectedCheckoutForm() {\r\n  return (\r\n    <ElementsConsumer>\r\n      {({ stripe, elements }) => (\r\n        <CheckoutForm stripe={stripe} elements={elements} />\r\n      )}\r\n    </ElementsConsumer>\r\n  );\r\n}","import React from 'react';\nimport './App.css';\n\nimport { Elements } from \"@stripe/react-stripe-js\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport CheckoutForm from \"./CheckoutForm\";\n\nconst stripePromise = loadStripe(\"pk_test_51HbfQ1EujJs5jSjOl5jubKZnc1tvrOoNLKBCwLB0An1piwwHEeb4q1Neim3OFbrMhZAyWZ5lPPG4j0kQaPJe0Cnu00VGX4hool\");\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"product\">\n        <img\n          src=\"https://images.pexels.com/photos/18105/pexels-photo.jpg?auto=compress\"\n          alt=\"laptop\"\n          style={{ width: \"100%\", height: \"auto\" }}\n        />\n        <div>\n        <Elements stripe={stripePromise}>\n            <CheckoutForm />\n          </Elements>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}